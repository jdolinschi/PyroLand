# file: src/pyroland/main.py
# -*- coding: utf-8 -*-
"""
PyroLand main entry point.

Only UI-behaviour customisation lives here, so that the auto-generated
`mainwindow.py` never needs manual edits.
"""

from __future__ import annotations

import sys
from typing import Optional

from PySide6.QtCore import Qt
from PySide6.QtWidgets import QApplication, QMainWindow

from src.pyroland.gui.ui.mainwindow import Ui_MainWindow
from src.pyroland.controllers.main_controller import MainController


class MainWindow(QMainWindow):
    """Top-level window with custom splitter behaviour."""

    # -------- configuration ------------------------------------------------ #
    _DEFAULT_SIZE = (1600, 900)          # first-show window geometry (w, h)
    _DEFAULT_RIGHT_WIDTH = 350           # right-hand pane width in pixels

    # ---------------------------------------------------------------------- #
    def __init__(self) -> None:
        super().__init__()

        # --- build UI generated by QtDesigner --------------------------------
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # --- resize main window ---------------------------------------------
        self.resize(*self._DEFAULT_SIZE)

        # --- splitter behaviour ---------------------------------------------
        self._remembered_right_width: int = self._DEFAULT_RIGHT_WIDTH
        self._splitter_initialised: bool = False

        # ensure all extra space goes to the *left* PlotWidget
        self.ui.splitter.setStretchFactor(0, 1)   # left widget
        self.ui.splitter.setStretchFactor(1, 0)   # right widget

        # if the user drags the handle, remember their preferred width
        self.ui.splitter.splitterMoved.connect(self._on_splitter_moved)

    # ------------------------------ Qt events ----------------------------- #
    # We wait until the window is about to be shown so that Qt knows the
    # full splitter width; otherwise setSizes() could be off by style/ DPI.
    def showEvent(self, event):  # noqa: D401  (Qt signature)
        super().showEvent(event)
        if not self._splitter_initialised:
            self._apply_splitter_width(self._remembered_right_width)
            self._splitter_initialised = True

    # --------------------------- private helpers -------------------------- #
    def _apply_splitter_width(self, right_width: int) -> None:
        """Resize splitter so the right widget is `right_width` pixels."""
        # current total width of the splitter (may differ from main win width)
        total_width = self.ui.splitter.size().width()
        # keep at least 50 px for the plot if window is very narrow
        left_width = max(total_width - right_width, 50)
        self.ui.splitter.setSizes([left_width, right_width])

    # slot connected to splitterMoved; updates remembered width
    def _on_splitter_moved(self, pos: int, index: int) -> None:  # noqa: D401
        # index == 0 for the handle between widget 0 (left) and 1 (right)
        right_width = self.ui.splitter.sizes()[1]
        # Avoid 0-width edge cases
        if right_width > 10:
            self._remembered_right_width = right_width


# --------------------------------------------------------------------------- #
# Application entry point
# --------------------------------------------------------------------------- #
def main(argv: Optional[list[str]] = None) -> None:  # pragma: no cover
    app = QApplication(argv or sys.argv)
    window = MainWindow()
    controller = MainController(window)  # noqa: F841 â€“ keeps reference
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":  # pragma: no cover
    main()
